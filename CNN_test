{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xNsf_XJnbG8D"
   },
   "source": [
    "# Identify Product Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "roOSlk6-aDnk"
   },
   "outputs": [],
   "source": [
    "# If additional packages are needed but are not installed by default, uncomment the last two lines of this cell\n",
    "# and replace <package list> with a list of additional packages.\n",
    "# This will ensure the notebook has all the dependencies and works everywhere\n",
    "\n",
    "# !mamba install torchmetrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 6845,
     "status": "ok",
     "timestamp": 1612694959437,
     "user": {
      "displayName": "Abhinav Gupta",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjBpiTimJbxMWFkdipjcGYSIUpGfIav82LSmCyTXw=s64",
      "userId": "04670585521629932433"
     },
     "user_tz": -330
    },
    "id": "fmWa0S0ZbYtx",
    "outputId": "50728477-25dd-4a30-9cbb-5b5946a13cd7"
   },
   "outputs": [],
   "source": [
    "# Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "import torch \n",
    "import torch.nn as nn\n",
    "from torchvision import transforms\n",
    "import torchvision.transforms.functional as fn\n",
    "from IPython import display\n",
    "import time\n",
    "from torch.utils.data import DataLoader\n",
    "from torchmetrics.classification import MulticlassF1Score\n",
    "\n",
    "from shutil import unpack_archive\n",
    "\n",
    "pd.set_option(\"display.max_columns\", 101)\n",
    "pd.set_option('display.max_colwidth', 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 11335,
     "status": "ok",
     "timestamp": 1612694963933,
     "user": {
      "displayName": "Abhinav Gupta",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjBpiTimJbxMWFkdipjcGYSIUpGfIav82LSmCyTXw=s64",
      "userId": "04670585521629932433"
     },
     "user_tz": -330
    },
    "id": "8EGjw54gbj3f",
    "outputId": "da9531ce-646f-488d-9b67-ba6a81b9b874"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2022-11-14 10:09:28--  https://hr-projects-assets-prod.s3.amazonaws.com/ga5kb1lho9/fcf2809c90f7732b089c137795ab53f3/train.zip\n",
      "Resolving hr-projects-assets-prod.s3.amazonaws.com (hr-projects-assets-prod.s3.amazonaws.com)... 52.217.68.156\n",
      "Connecting to hr-projects-assets-prod.s3.amazonaws.com (hr-projects-assets-prod.s3.amazonaws.com)|52.217.68.156|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 36123572 (34M) [binary/octet-stream]\n",
      "Saving to: ‘train.zip’\n",
      "\n",
      "train.zip           100%[===================>]  34.45M  60.4MB/s    in 0.6s    \n",
      "\n",
      "2022-11-14 10:09:29 (60.4 MB/s) - ‘train.zip’ saved [36123572/36123572]\n",
      "\n",
      "--2022-11-14 10:09:29--  https://hr-projects-assets-prod.s3.amazonaws.com/ga5kb1lho9/4052db6695652e89844672926cbd7251/test.zip\n",
      "Resolving hr-projects-assets-prod.s3.amazonaws.com (hr-projects-assets-prod.s3.amazonaws.com)... 52.217.68.156\n",
      "Connecting to hr-projects-assets-prod.s3.amazonaws.com (hr-projects-assets-prod.s3.amazonaws.com)|52.217.68.156|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 18001734 (17M) [binary/octet-stream]\n",
      "Saving to: ‘test.zip’\n",
      "\n",
      "test.zip            100%[===================>]  17.17M  46.4MB/s    in 0.4s    \n",
      "\n",
      "2022-11-14 10:09:30 (46.4 MB/s) - ‘test.zip’ saved [18001734/18001734]\n",
      "\n",
      "Extracting Train Dataset:\n",
      "Extracting Test Dataset:\n"
     ]
    }
   ],
   "source": [
    "# Run this cell block to download and extract dataset\n",
    "!wget 'https://hr-projects-assets-prod.s3.amazonaws.com/ga5kb1lho9/fcf2809c90f7732b089c137795ab53f3/train.zip'\n",
    "!wget 'https://hr-projects-assets-prod.s3.amazonaws.com/ga5kb1lho9/4052db6695652e89844672926cbd7251/test.zip'\n",
    "\n",
    "print('Extracting Train Dataset:')\n",
    "unpack_archive('train.zip', '')\n",
    "\n",
    "print('Extracting Test Dataset:')\n",
    "unpack_archive('test.zip', '')\n",
    "\n",
    "# Remove zip files\n",
    "os.remove('train.zip')\n",
    "os.remove('test.zip')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "r8kqQ8h2eMJn"
   },
   "source": [
    "\n",
    "\n",
    "## Data Description"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "MxXczpXMeNPO"
   },
   "source": [
    "Column | Description\n",
    ":---|:---\n",
    "`img_id` | path of the product image\n",
    "`category` | product category ('Accessories', 'Personal Care', 'Apparel', 'Footwear')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "executionInfo": {
     "elapsed": 11275,
     "status": "ok",
     "timestamp": 1612694963947,
     "user": {
      "displayName": "Abhinav Gupta",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjBpiTimJbxMWFkdipjcGYSIUpGfIav82LSmCyTXw=s64",
      "userId": "04670585521629932433"
     },
     "user_tz": -330
    },
    "id": "efkG0EkjeBWo",
    "outputId": "3d69c3d4-94e6-4a77-af12-1efd9aca1ee1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>img_id</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>train/58607.jpg</td>\n",
       "      <td>Accessories</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>train/55451.jpg</td>\n",
       "      <td>Personal Care</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>train/48190.jpg</td>\n",
       "      <td>Accessories</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>train/35901.jpg</td>\n",
       "      <td>Accessories</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>train/55142.jpg</td>\n",
       "      <td>Personal Care</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            img_id       category\n",
       "0  train/58607.jpg    Accessories\n",
       "1  train/55451.jpg  Personal Care\n",
       "2  train/48190.jpg    Accessories\n",
       "3  train/35901.jpg    Accessories\n",
       "4  train/55142.jpg  Personal Care"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The information dataset for the training set is already loaded below\n",
    "train_data = pd.read_csv('train.csv')\n",
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>img_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>test/45717.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>test/29453.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>test/57800.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>test/40746.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>test/53651.jpg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           img_id\n",
       "0  test/45717.jpg\n",
       "1  test/29453.jpg\n",
       "2  test/57800.jpg\n",
       "3  test/40746.jpg\n",
       "4  test/53651.jpg"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# don't need to worry about this right now as it cannot be used in training\n",
    "test_data = pd.read_csv('test.csv')\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "hW7s7Dl6A2fF"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Accessories', 'Personal Care', 'Apparel', 'Footwear'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['category'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Accessories      1454\n",
       "Apparel          1378\n",
       "Personal Care    1288\n",
       "Footwear         1188\n",
       "Name: category, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['category'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "wHrNW573ryKp"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5308"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2615"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(test_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Exploration \n",
    "\n",
    "#### 1.) Look through data visually, check height, width, dimensionality (channels)\n",
    "     Most of the data had shape (80,60,3), and some with (80,60). For these cases, I converted to (1, 80, 60) where they are grayscaled and normalized. For images that were not that shape (there were very few outliers), I trashed them.\n",
    "\n",
    "#### 2.) Setup create_dataset() function to get data ready to be loaded into pytorch\n",
    "     Categories = True means all of your data has labels, and thus will be split into a training and test set of chosen size within function. Categories = False means the data is unlabeled and thus does not need any encoding and cannot be split for training purposes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\ntesting_images = [mpimg.imread(file) for file in test_data['img_id']]\\n\\n# look through images, their categories, and their shape\\ndef visualize_data(image_set):\\n    for i, image in enumerate(image_set):\\n        plt.gca().clear()\\n        plt.imshow(image);\\n        plt.title(test_data.loc[i][1])\\n        plt.xlabel(image_set[i].shape)\\n        display.display(plt.gcf())\\n        display.clear_output(wait=True)\\n        time.sleep(1.0)\\n        \\nvisualize_data(testing_images)\\n\""
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Originally used early on to get a visual idea of dataset,\n",
    "# later moved towards end of workflow to 'check' test predictions.\n",
    "\n",
    "'''\n",
    "testing_images = [mpimg.imread(file) for file in test_data['img_id']]\n",
    "\n",
    "# look through images, their categories, and their shape\n",
    "def visualize_data(image_set):\n",
    "    for i, image in enumerate(image_set):\n",
    "        plt.gca().clear()\n",
    "        plt.imshow(image);\n",
    "        plt.title(test_data.loc[i][1])\n",
    "        plt.xlabel(image_set[i].shape)\n",
    "        display.display(plt.gcf())\n",
    "        display.clear_output(wait=True)\n",
    "        time.sleep(1.0)\n",
    "        \n",
    "visualize_data(testing_images)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_dataset(data, categories=True):\n",
    "    '''\n",
    "    Accepts pandas dataframe with column ['img_id'] storing\n",
    "    path to images. \n",
    "    Categories parameter: True to split train_data into train+test (since the\n",
    "    actual test data is unlabeled) \n",
    "    \n",
    "    Returns - Categories = True: train_set, test_set, new_df\n",
    "              Categories = False: test_set, new_df\n",
    "    '''\n",
    "    \n",
    "    # read in images from file path and check for shape consistency\n",
    "    dataset_images = [mpimg.imread(file) for file in data['img_id']]\n",
    "    org_len = len(dataset_images)\n",
    "    img_dict = {}\n",
    "    count1 = 0\n",
    "    for i in range(org_len):\n",
    "        if dataset_images[i].shape != (80,60,3) and dataset_images[i].shape != (80,60):\n",
    "            count1 += 1\n",
    "            img_dict[i] = dataset_images[i].shape \n",
    "    print(img_dict)\n",
    "    # remove images that are not correct size (no point in reshaping a handful\n",
    "    # of images)\n",
    "    count2 = 0\n",
    "    for i in img_dict.keys():\n",
    "        del dataset_images[i - count2]\n",
    "        data = data.drop([i - count2])\n",
    "        count2 += 1\n",
    "        \n",
    "    assert org_len == len(dataset_images) + count1\n",
    "    assert org_len == len(data) + count2\n",
    "    \n",
    "    # convert image data into grayscale tensors to be loaded into PyTorch\n",
    "    # DataLoader. Note: PyTorch requires shape (Batch, Channel, H, W)\n",
    "    for i, img in enumerate(dataset_images):\n",
    "        if dataset_images[i].shape == (80, 60, 3):\n",
    "            dataset_images[i] = torch.Tensor(dataset_images[i])\n",
    "            dataset_images[i] = torch.moveaxis(dataset_images[i], -1, 0)\n",
    "            dataset_images[i] = transforms.Grayscale()(dataset_images[i])\n",
    "        elif dataset_images[i].shape == (80, 60):\n",
    "            dataset_images[i] = torch.Tensor(dataset_images[i])\n",
    "            dataset_images[i] = torch.unsqueeze(dataset_images[i], 0)\n",
    "            \n",
    "    # stack tensors and normalize all image data\n",
    "    dataset_images = torch.stack(dataset_images)\n",
    "    loader = DataLoader(dataset_images, batch_size=len(dataset_images))\n",
    "    temp = next(iter(loader))\n",
    "    mean = temp.mean()\n",
    "    std = temp.std()\n",
    "    transform = transforms.Normalize(mean, std)\n",
    "    norm_images = transform(dataset_images)\n",
    "    \n",
    "    # encode categorical variables (if available)\n",
    "    if categories==True:\n",
    "        data['category'] = data['category'].astype('category')\n",
    "        data['category_code'] = data['category'].cat.codes\n",
    "        train_y = torch.LongTensor(data['category_code'].values)\n",
    "        \n",
    "        dataset = torch.utils.data.TensorDataset(norm_images, train_y)\n",
    "        # when doing train + test split, change 1.0 to something smaller like 0.8\n",
    "        train_size = int(1.0 * len(dataset))\n",
    "        test_size = len(dataset) - train_size\n",
    "        \n",
    "        # Note: we could take our time to split data evenly along the classes,\n",
    "        # but they are not too far imbalanced for that to cause major issues.\n",
    "        train_data_split, test_data_split = torch.utils.data.random_split(dataset, \n",
    "                                                            [train_size, test_size])\n",
    "        return train_data_split, test_data_split, data\n",
    "    \n",
    "    else:\n",
    "        return norm_images, data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1602: (79, 60, 3), 2556: (80, 53, 3), 3311: (60, 60, 3), 4999: (80, 53, 3)}\n",
      "{1349: (80, 53, 3)}\n"
     ]
    }
   ],
   "source": [
    "training_data_split, _, train_data = create_dataset(train_data, categories=True)\n",
    "testing_data_split, test_data = create_dataset(test_data, categories=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DR-SDOzimse3"
   },
   "source": [
    "## Deep Learning\n",
    "\n",
    "Build a neural network that can identify the product type.\n",
    "- **The model's performance will be evaluated on the basis of weighted F1-score.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "xlCNnIWZmoG6"
   },
   "outputs": [],
   "source": [
    "class CNNBlock(nn.Module):\n",
    "    '''\n",
    "        Define the CNN block architecture to make adding and removing\n",
    "        layers easier, and make architecture more readable.\n",
    "    '''\n",
    "    \n",
    "    def __init__(self, input_channels, output_channels):\n",
    "        super(CNNBlock, self).__init__()\n",
    "        self.conv = nn.Conv2d(in_channels=input_channels,\n",
    "                              kernel_size=3, \n",
    "                              out_channels=output_channels)\n",
    "        self.bn = nn.BatchNorm2d(num_features=output_channels)\n",
    "        self.relu = nn.ReLU()\n",
    "        \n",
    "    def forward(self, batch_data):\n",
    "        output = self.conv(batch_data)\n",
    "        output = self.bn(output)\n",
    "        output = self.relu(output)\n",
    "        \n",
    "        return output\n",
    "    \n",
    "class CNNNetwork(nn.Module):\n",
    "    '''\n",
    "    Network Architecture:\n",
    "            1.) ReLU(BatchNorm(Convolution))\n",
    "            2.) MaxPooling\n",
    "            3.) Dropout\n",
    "            4.) ReLU(BatchNorm(Convolution))\n",
    "            5.) MaxPooling\n",
    "            6.) Dropout\n",
    "    '''\n",
    "    def __init__(self, lr, batch_size, n_classes, epochs):\n",
    "        super(CNNNetwork, self).__init__()\n",
    "        self.lr = lr\n",
    "        self.batch_size = batch_size\n",
    "        self.n_classes = n_classes\n",
    "        self.epochs = epochs\n",
    "        self.loss_history = []\n",
    "        self.acc_history = []\n",
    "\n",
    "        self.block1 = CNNBlock(input_channels=1, output_channels=16)\n",
    "        \n",
    "        self.max_pool1  = nn.MaxPool2d(kernel_size=2)\n",
    "        self.dropout1 = nn.Dropout(0.25)\n",
    "        \n",
    "        self.block2 = CNNBlock(input_channels=16, output_channels=32)\n",
    "        \n",
    "        self.max_pool2 = nn.MaxPool2d(kernel_size=2)\n",
    "        self.dropout2 = nn.Dropout(0.25)\n",
    "        \n",
    "        self.network = nn.Sequential(self.block1, self.max_pool1,\n",
    "                                     self.dropout1, self.block2,\n",
    "                                     self.max_pool2, self.dropout2)\n",
    "        \n",
    "        input_dims = self.calc_input_dims()\n",
    "        self.fc = nn.Linear(input_dims, self.n_classes)\n",
    "        self.loss = nn.CrossEntropyLoss()\n",
    "        self.optimizer = torch.optim.Adam(self.parameters(), lr=self.lr)\n",
    "        \n",
    "        \n",
    "    def calc_input_dims(self):\n",
    "        # retrieves the shape that will be fed into fully connected layer\n",
    "        batch_data = torch.zeros((1,1,80,60))\n",
    "        batch_data = self.block1(batch_data)\n",
    "        batch_data = self.max_pool1(batch_data)\n",
    "        batch_data = self.block2(batch_data)\n",
    "        batch_data = self.max_pool2(batch_data)\n",
    "        return int(np.prod(batch_data.size()))\n",
    "    \n",
    "    def forward(self, batch_data):\n",
    "        output = self.network(batch_data)\n",
    "        output = output.view(-1,self.calc_input_dims())\n",
    "        output = self.fc(output)\n",
    "        \n",
    "        return output\n",
    "    \n",
    "    def _train(self, training_data):\n",
    "        '''\n",
    "        Repeat for each epoch:\n",
    "        1.) prediction from forward pass of data\n",
    "        2.) compute accuracy as percentage of total number correct\n",
    "        3.) back propogate loss and step optimizer \n",
    "        '''\n",
    "        \n",
    "        self.train_data_loader = torch.utils.data.DataLoader(training_data, \n",
    "                        batch_size=self.batch_size,\n",
    "                        shuffle=True)\n",
    "        self.train()\n",
    "        for i in range(self.epochs):\n",
    "            ep_loss = 0\n",
    "            ep_acc = []\n",
    "            for j, (input, label) in enumerate(self.train_data_loader):\n",
    "                self.optimizer.zero_grad()\n",
    "                prediction = self.forward(input)\n",
    "                classes = torch.argmax(prediction, dim=1)\n",
    "                wrong = torch.where(classes != label,\n",
    "                                torch.tensor([1.]), torch.tensor([0.]))\n",
    "                acc = 1 - torch.sum(wrong) / self.batch_size\n",
    "                loss = self.loss(prediction, label)\n",
    "                ep_acc.append(acc.item())\n",
    "                self.acc_history.append(acc.item())\n",
    "                ep_loss += loss.item()\n",
    "                loss.backward()\n",
    "                self.optimizer.step()\n",
    "            print('Finish Epoch ', i, 'total loss %.3f' % ep_loss,\n",
    "                 'accuracy %.3f' %np.mean(ep_acc))\n",
    "            self.loss_history.append(ep_loss)\n",
    "            \n",
    "    def _test(self, testing_data):\n",
    "        '''\n",
    "        Used when doing a train+test split with labeled data\n",
    "        to receive testing metrics and check for overfitting.\n",
    "        '''\n",
    "        self.test_data_loader = torch.utils.data.DataLoader(testing_data, \n",
    "                batch_size=self.batch_size,\n",
    "                shuffle=False)\n",
    "        self.eval()\n",
    "        ep_loss = 0\n",
    "        ep_acc = []\n",
    "        predictions_list = []\n",
    "        label_list = []\n",
    "        for j, (input, label) in enumerate(self.test_data_loader):\n",
    "            prediction = self.forward(input)\n",
    "            classes = torch.argmax(prediction, dim=1)\n",
    "            predictions_list.append(classes)\n",
    "            label_list.append(label)\n",
    "            wrong = torch.where(classes != label,\n",
    "                            torch.tensor([1.]), torch.tensor([0.]))\n",
    "            acc = 1 - torch.sum(wrong) / self.batch_size\n",
    "            loss = self.loss(prediction, label)\n",
    "            ep_acc.append(acc.item())\n",
    "            ep_loss += loss.item()\n",
    "        print('test loss %.3f' % ep_loss,\n",
    "             'test accuracy %.3f' %np.mean(ep_acc))\n",
    "        self.loss_history.append(ep_loss)\n",
    "        return predictions_list, label_list\n",
    "    \n",
    "    def _test_set(self, testing_data):\n",
    "        '''\n",
    "        Used for making prediction on unlabeled test set.\n",
    "        '''\n",
    "        self.test_data_loader = torch.utils.data.DataLoader(testing_data, \n",
    "                batch_size=self.batch_size,\n",
    "                shuffle=False)\n",
    "        self.eval()\n",
    "        predictions_list = []\n",
    "        for j, input in enumerate(self.test_data_loader):\n",
    "            prediction = self.forward(input)\n",
    "            classes = torch.argmax(prediction, dim=1)\n",
    "            predictions_list.append(classes)\n",
    "        return predictions_list\n",
    "        \n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "7VjhrFrutwWc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finish Epoch  0 total loss 59.061 accuracy 0.887\n",
      "Finish Epoch  1 total loss 28.970 accuracy 0.946\n",
      "Finish Epoch  2 total loss 23.893 accuracy 0.958\n",
      "Finish Epoch  3 total loss 19.220 accuracy 0.966\n",
      "Finish Epoch  4 total loss 16.350 accuracy 0.970\n",
      "Finish Epoch  5 total loss 18.176 accuracy 0.967\n",
      "Finish Epoch  6 total loss 13.934 accuracy 0.973\n",
      "Finish Epoch  7 total loss 11.832 accuracy 0.977\n",
      "Finish Epoch  8 total loss 9.365 accuracy 0.982\n",
      "Finish Epoch  9 total loss 8.919 accuracy 0.982\n"
     ]
    }
   ],
   "source": [
    "# Initialize and run network on training and testing data\n",
    "network = CNNNetwork(lr=0.001, batch_size=32, epochs=10, n_classes=4)\n",
    "network._train(training_data_split)\n",
    "# pred_list, label_list = network._test(test_data_split)\n",
    "pred_list = network._test_set(testing_data_split)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "pnw0Nm2ztweC"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(network.loss_history)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "0YJhXygim5ql"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(network.acc_history)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "sXCkndGRm6Bz"
   },
   "source": [
    "> #### Task:\n",
    "- **Submit the predictions on the test dataset using your optimized model** <br/>\n",
    "    For each record in the test set (`test.csv`), predict the value of the `category` variable.  You should submit a CSV file with a header row and one row per test entry. \n",
    "\n",
    "The file (`submissions.csv`) should have exactly 2 columns:\n",
    "\n",
    "Column | Description\n",
    ":---|:---\n",
    "`img_id` | path of the product image\n",
    "`category` | product category ('Accessories', 'Personal Care', 'Apparel', 'Footwear')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "executionInfo": {
     "elapsed": 1081,
     "status": "ok",
     "timestamp": 1612695022825,
     "user": {
      "displayName": "Abhinav Gupta",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjBpiTimJbxMWFkdipjcGYSIUpGfIav82LSmCyTXw=s64",
      "userId": "04670585521629932433"
     },
     "user_tz": -330
    },
    "id": "m0UOiaNWnvL5",
    "outputId": "33e34002-e774-4378-ddc1-f876169bf5eb"
   },
   "outputs": [],
   "source": [
    "# test = pd.read_csv('test.csv')\n",
    "# test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# compute multiclass f1 score if you have label data\n",
    "\n",
    "pred_list = torch.cat(pred_list, dim=0)\n",
    "# label_list = torch.cat(label_list, dim=0)\n",
    "\n",
    "# f1 = MulticlassF1Score(num_classes=4, average='weighted')\n",
    "# f1(pred_list, label_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              img_id       category\n",
      "0     test/45717.jpg  Personal Care\n",
      "1     test/29453.jpg    Accessories\n",
      "2     test/57800.jpg  Personal Care\n",
      "3     test/40746.jpg    Accessories\n",
      "4     test/53651.jpg    Accessories\n",
      "...              ...            ...\n",
      "2610  test/48206.jpg    Accessories\n",
      "2611  test/54397.jpg    Accessories\n",
      "2612  test/56571.jpg        Apparel\n",
      "2613  test/52979.jpg        Apparel\n",
      "2614  test/46926.jpg  Personal Care\n",
      "\n",
      "[2614 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "# decode the categories and add to test dataframe\n",
    "img_dict = {0:'Accessories', 1:'Apparel', 2:'Footwear', 3:'Personal Care'}\n",
    "test_category = []\n",
    "\n",
    "for i, pred in enumerate(pred_list):\n",
    "    test_category.append(img_dict[pred.item()])\n",
    "    \n",
    "test_data['category'] = test_category\n",
    "print(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "JvDjtDgQPf0B"
   },
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Input \u001b[0;32mIn [21]\u001b[0m, in \u001b[0;36m<cell line: 16>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m         display\u001b[38;5;241m.\u001b[39mclear_output(wait\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m     14\u001b[0m         time\u001b[38;5;241m.\u001b[39msleep(\u001b[38;5;241m1.0\u001b[39m)\n\u001b[0;32m---> 16\u001b[0m \u001b[43mvisualize_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtesting_images\u001b[49m\u001b[43m)\u001b[49m\n",
      "Input \u001b[0;32mIn [21]\u001b[0m, in \u001b[0;36mvisualize_data\u001b[0;34m(image_set)\u001b[0m\n\u001b[1;32m     12\u001b[0m display\u001b[38;5;241m.\u001b[39mdisplay(plt\u001b[38;5;241m.\u001b[39mgcf())\n\u001b[1;32m     13\u001b[0m display\u001b[38;5;241m.\u001b[39mclear_output(wait\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m---> 14\u001b[0m \u001b[43mtime\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msleep\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1.0\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sanity check on answers, look through a few and make sure network is making \n",
    "# reasonable choices. \n",
    "\n",
    "testing_images = [mpimg.imread(file) for file in test_data['img_id']]\n",
    "# look through images, their categories, and their shape\n",
    "def visualize_data(image_set):\n",
    "    for i, image in enumerate(image_set):\n",
    "        plt.gca().clear()\n",
    "        plt.imshow(image);\n",
    "        plt.title(test_data.loc[i][1])\n",
    "        plt.xlabel(image_set[i].shape)\n",
    "        display.display(plt.gcf())\n",
    "        display.clear_output(wait=True)\n",
    "        time.sleep(1.0)\n",
    "        \n",
    "visualize_data(testing_images)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission_df = test_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "id": "oo1BW2qnnzJj"
   },
   "outputs": [],
   "source": [
    "# Please not the size of the dataset is different by 1 from the original,\n",
    "# as to save time I did not invoke any reshaping just for one image. \n",
    "# The index and image shape of incorrectly sized images is printed\n",
    "# when running the create_dataset() function\n",
    "\n",
    "\n",
    "#Submission\n",
    "submission_df.to_csv('submissions.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Questions.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
